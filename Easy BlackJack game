import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
hand_value = 0 
dealer_back_loc = (0, 0)
pos_back = [0,0]
# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand = []
        # create Hand object

    def __str__(self):
        s = ""
        for card in self.hand:
            s = s + (str(card.get_suit()) + str(card.get_rank())) + " "
            # return a string representation of a hand
        return "Hand contains: " + s 

    def add_card(self, card):
        self.card = card
        self.hand.append(card)
            # add a card object to a hand
        return self.hand
          
    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        hand_value = 0 
        for card in self.hand:
            card_rank = Card.get_rank(card)
            card_value = VALUES[card_rank]
            hand_value += card_value
            
        if "A" not in [self.hand]:
                return hand_value  
        else:
            if hand_value + 10 <= 21:
                return hand_value + 10
            else:
                return hand_value
        return hand_value
    
    
    def draw(self, canvas, pos):
        global card_loc
        for card in self.hand:
            card.draw(canvas, (pos[0], pos[1]))
            pos[0] = pos[0] + CARD_SIZE[0]

class Deck:
    def __init__(self):
        self.deck = []
        for suit in SUITS: 
            for rank in RANKS:
                self.deck.append(Card(suit, rank))

    def shuffle(self):
        random.shuffle(self.deck)
            # use random.shuffle()

    def deal_card(self):
        return self.deck.pop(0)                         
            # deal a card object from the deck
    
    def __str__(self):
        d = ""
        for card in self.deck:
            d = d + (str(card.get_suit()) + str(card.get_rank())) + " "
            # return a string representation of a hand
        return "Deck contains: " + d 
            # return a string representing the deck        

#define event handlers for buttons
def deal():
    global outcome, in_play, new_player, dealer_hand, deck, outcome, score

    # your code goes here
    deck = Deck()
    deck.shuffle()
    new_player = Hand()
    dealer_hand = Hand()
    new_player.add_card(deck.deal_card())
    dealer_hand.add_card(deck.deal_card())
    new_player.add_card(deck.deal_card())
    dealer_hand.add_card(deck.deal_card())  
    if in_play == True:
        outcome = "Deal mid-play, Player loses, Deal Again"
        score -= 1
        in_play = False
    else:
        in_play = True
        outcome = "Player, Hit or Stand?"
    
#    print new_player
#    print dealer_hand
#    print "player hand is", new_player.get_value()
#    print "dealer hand is", dealer_hand.get_value()

def hit():
        # replace with your code below
    global new_player, dealer_hand, deck, score, outcome, in_play
    # if the hand is in play, hit the player
    if in_play == True:
        if new_player.get_value() <= 21:
            new_player.add_card(deck.deal_card())
            print new_player
            print "player hand is", new_player.get_value()
            if new_player.get_value() > 21:
                outcome = "Player Busts, Deal Again?"
                score -= 1
                in_play = False

    else:
        stand_calc()
        
def stand():
       
    global new_player, dealer_hand, deck, score, outcome, in_play
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    
    if in_play == True:
        if new_player.get_value() > 21:
            outcome = "Player has busted, Deal Again?"
            in_play = False
            score -= 1

        
    # assign a message to outcome, update in_play and score
        elif in_play == True and dealer_hand.get_value() == 17:
            outcome = "Dealer Stands"
            stand_calc()

       
        elif dealer_hand.get_value() > 17 and dealer_hand.get_value() <= 21:
            stand_calc()
            
        else:
            while dealer_hand.get_value() < 17:
                dealer_hand.add_card(deck.deal_card())

                if dealer_hand.get_value() >= 17 and dealer_hand.get_value()<= 21:
                    stand_calc()
                elif dealer_hand.get_value() > 21:
                    outcome = "Dealer Busts, Deal Again?"
                    score += 1
                    in_play = False

    else:
        in_play = False
        
def stand_calc():
    global new_player, dealer_hand, deck, score, outcome, in_play
    if in_play == True:
        if new_player.get_value() < dealer_hand.get_value():
            print "dealer hand is", dealer_hand.get_value()
            outcome = "Dealer Wins, Deal Again?"
            score -= 1
            in_play = False
            
        elif new_player.get_value() > dealer_hand.get_value():
            print "dealer hand is", dealer_hand.get_value()
            outcome = "Player Wins, Deal Again?"
            score += 1
            in_play = False
            
        else:
            print "dealer hand is", dealer_hand.get_value()
            outcome = "A TIE!! Sorry Dealer Wins ties, Deal Again?"
            score -= 1
            in_play = False
                         
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    global new_player, dealer_hand, pos, score, card , dealer_back_loc   
    new_player.draw(canvas, [100, 400])
    dealer_hand.draw(canvas, [100, 150])
    if in_play == True:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [135, 199], CARD_BACK_SIZE)
        #canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE,[pos_back[0] + CARD_BACK_SIZE[0]*2, pos_back[1] + CARD_BACK_SIZE[1]*2], CARD_BACK_SIZE)
        
    else:
        dealer_hand.draw(canvas, [100, 150])
        
        #it's image, image_center_loc, image_size, position_on_canvas, size_on_canvas
    canvas.draw_text("BLACKJACK", [200, 50], 36, "White")
    canvas.draw_text("Player's Hand", [100, 380], 24, "Black")
    canvas.draw_text("Dealer's Hand", [100, 130], 24, "Black")
    canvas.draw_text(outcome, [200, 550], 24, "Black")
    canvas.draw_text("Score:" , [500, 30], 24, "White")
    canvas.draw_text(str(score), [570, 30], 24, "Black")
    # initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# get things rolling
deal()
frame.start()
